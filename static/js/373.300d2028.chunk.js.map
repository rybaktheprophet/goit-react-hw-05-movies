{"version":3,"file":"static/js/373.300d2028.chunk.js","mappings":"2LACA,EAA6B,8BAA7B,EAAuE,6BAAvE,EAAgH,6B,SCEnGA,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAGjB,OAAKF,GAKH,eAAIG,UAAWC,EAAf,SACGJ,EAAOK,KAAI,SAAAC,GACZ,IAAMC,EAAQD,EAAME,cAAN,0CACwBF,EAAME,eACzC,mEAEH,OAAO,eAAmBL,UAAWC,EAA9B,UACN,UAAC,KAAD,CAAMK,GAAE,kBAAaH,EAAMI,IAAMC,MAAQ,CAAEC,KAAMX,GAAWE,UAAWC,EAAvE,WACG,wBAAKE,EAAMO,SACV,gBACAC,IAAKP,EACLQ,IAAKT,EAAMO,YALAP,EAAMI,GASvB,WApBW,CAuBf,C,mHC7BD,GAAgB,UAAY,yBAAyB,KAAO,qB,SCgD5D,MA1CA,WAAmB,IAAD,EAEhB,GAAwCM,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAa,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAiBjD,OAfFC,EAAAA,EAAAA,YAAU,WACHF,IAELJ,EAAeI,IACfG,EAAAA,EAAAA,IAAgBH,GAAeI,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACrCX,EAAgBW,EACjB,IACF,GAAE,CAACL,KASF,iBAAKrB,UAAWC,EAAAA,UAAhB,WACI,kBAAM0B,SARS,SAAAC,GACnBA,EAAMC,iBACNT,EAAgB,CAAEU,MAAOd,GAE1B,EAImChB,UAAWC,EAAAA,KAAzC,WACA,kBACID,UAAWC,EAAAA,gBACX8B,KAAK,OACLC,aAAa,MACbC,KAAK,cACLC,WAAS,EACTC,YAAY,eACZC,SAAU,SAAAC,GAAC,OAAIpB,EAAeoB,EAAEC,OAAOC,MAA5B,KAEb,mBAAQR,KAAK,SAAb,wBAEF,SAAC,IAAD,CAAWlC,OAAUiB,MAG5B,C,+LC7CD0B,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAgB,mCAAG,sGACPF,EAAAA,EAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,KAAM,KAHoB,uBACtBC,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,qDAUhBrB,EAAe,mCAAG,WAAMM,GAAN,yFACNU,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNb,MAAAA,KAHyB,uBACrBe,EADqB,EACrBA,KADqB,kBAMtBA,GANsB,2CAAH,sDAUfC,EAAY,mCAAG,WAAMC,GAAN,yFACHP,EAAAA,EAAAA,IAAA,iBAAoBO,IADjB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAW,mCAAG,WAAMD,GAAN,yFACFP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADE,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAMXI,EAAa,mCAAG,WAAMF,GAAN,yFACJP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADI,uBACnBF,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/MoveList/MovieList.module.css?5138","components/MoveList/MoveList.jsx","webpack://react-homework-template/./src/pages/Movies/Movie.module.css?ed9b","pages/Movies/Movies.jsx","services/MovieAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listMovies\":\"MovieList_listMovies__BlttL\",\"itemMovie\":\"MovieList_itemMovie__sURUG\",\"cardMovie\":\"MovieList_cardMovie__H8TtT\"};","import { Link, useLocation } from \"react-router-dom\";\nimport css from \"./MovieList.module.css\"\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n\n  if (!movies){ return } \n  \n  else {\n\n    return (\n    <ul className={css.listMovies}>\n      {movies.map(movie => {\n      const image = movie.backdrop_path \n       ? `https://image.tmdb.org/t/p/w500/${movie.backdrop_path}`\n       : 'https://dummyimage.com/400x225/000/fff&text=Image+is+not+defined';\n      \n      return <li key={movie.id} className={css.itemMovie}>\n       <Link to={`/movies/${movie.id}`} state ={{ from: location}} className={css.cardMovie}>\n          <h2>{movie.title}</h2>\n           <img\n           src={image}\n           alt={movie.title}\n          />\n         </Link>\n        </li>\n    })}\n    </ul>\n  )}\n};","// extracted by mini-css-extract-plugin\nexport default {\"formStyle\":\"Movie_formStyle__KcL74\",\"form\":\"Movie_form__seph4\"};","import { getMovieByQuery } from \"services/MovieAPI\";\nimport { useEffect, useState } from 'react';\nimport { MovieList } from \"components/MoveList/MoveList\";\nimport { useSearchParams } from 'react-router-dom';\n\nimport css from \"./Movie.module.css\"\n\nfunction Movies (){\n\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const movieToSearch = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!movieToSearch) return;\n\n    setSearchQuery(movieToSearch);\n    getMovieByQuery(movieToSearch).then(({ results }) => {      \n      setSearchMovies(results);\n    });\n  }, [movieToSearch]);\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    setSearchParams({ query: searchQuery });\n    \n  };\n\n    return ( \n    <div className={css.formStyle}>\n        <form onSubmit={onFormSubmit} className={css.form}>\n        <input\n            className={css.SearchFormInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"searchMovie\"\n            autoFocus\n            placeholder=\"Search movie\"\n            onChange={e => setSearchQuery(e.target.value)}\n          /> \n          <button type=\"submit\"> Find </button>\n        </form>\n        <MovieList movies = {searchMovies}/>\n    </div>\n    )\n} \n\nexport default Movies;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: '794730dc1c43e9adb303e39dd0b0dcb2',\n};\n\nexport const getTrendingMovie = async () => {\n  const { data } = await axios.get('/trending/movie/day', {\n    params: {\n      page: 1,\n    },\n  });\n  return data;\n};\n\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\n\nexport const getMovieById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}`);    \n  return data;\n};\n\nexport const getCastById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/credits`);    \n  return data;\n};\n\n\nexport const getReviewById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/reviews`);    \n  return data;\n};"],"names":["MovieList","movies","location","useLocation","className","css","map","movie","image","backdrop_path","to","id","state","from","title","src","alt","useState","searchMovies","setSearchMovies","searchQuery","setSearchQuery","useSearchParams","searchParams","setSearchParams","movieToSearch","get","useEffect","getMovieByQuery","then","results","onSubmit","event","preventDefault","query","type","autoComplete","name","autoFocus","placeholder","onChange","e","target","value","axios","api_key","getTrendingMovie","params","page","data","getMovieById","movie_id","getCastById","getReviewById"],"sourceRoot":""}